import os
import json
import logging
import re
from openai import OpenAI
from dotenv import load_dotenv

# Load API Key
load_dotenv()
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# Configure Logging
LOG_FILE = "strategy_errors.log"
DEBUG_FILE = "strategy_debug.json"

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def sanitize_json_response(response_text):
    """Removes unwanted characters (e.g., Markdown formatting) from the JSON response."""
    # Remove Markdown code block markers (e.g., ```json ... ```)
    response_text = re.sub(r"```json\s*|\s*```", "", response_text).strip()
    return response_text

def convert_risk_management_values(strategy_json):
    """Ensures risk management values are numerical or percentages."""
    if "risk_management" in strategy_json:
        for key in ["stop_loss", "take_profit", "position_size"]:
            if key in strategy_json["risk_management"]:
                value = strategy_json["risk_management"][key]
                try:
                    if isinstance(value, str) and value.endswith('%'):
                        # Convert percentage string to float
                        strategy_json["risk_management"][key] = float(value.strip('%')) / 100.0
                    else:
                        # Convert numeric string or number to float
                        strategy_json["risk_management"][key] = float(value)
                except ValueError:
                    raise ValueError(f"Invalid numeric value for {key}: {value}")
    return strategy_json

class ChatGPTAPI:
    """
    A class for interfacing with ChatGPT to generate JSON-based responses
    for trading strategies and stock screeners.
    """

    def __init__(self, model_name="gpt-4o-mini"):
        """
        :param model_name: The name of the OpenAI model to use.
        """
        self.model_name = model_name

    def _send_request(self, system_prompt, user_input, chat_history=None):
        """
        Internal helper to send a request to the ChatGPT API and parse the JSON response.
        """
        messages = [{"role": "system", "content": system_prompt}]

        # If chat history exists, include it
        if chat_history and isinstance(chat_history, list):
            messages.extend(chat_history)

        # Add user's latest request
        messages.append({"role": "user", "content": user_input})

        try:
            print(f"üìå Debug: Sending request to OpenAI API using `{self.model_name}`...")
            response = client.chat.completions.create(
                model=self.model_name,
                messages=messages
            )

            # Extract API response content
            raw_text = response.choices[0].message.content.strip()
            print(f"üìå Debug: Raw API Response:\n{raw_text}")

            # Save raw response to a debug file
            with open(DEBUG_FILE, "a", encoding="utf-8") as debug_file:
                debug_file.write(raw_text + "\n")

            # Sanitize JSON
            clean_text = sanitize_json_response(raw_text)
            parsed_json = json.loads(clean_text)
            return parsed_json

        except json.JSONDecodeError:
            error_message = "Invalid JSON format generated by ChatGPT."
            logging.error(error_message)
            print(f"‚ùå Debug: {error_message}")
            return {"error": error_message}

        except Exception as e:
            error_message = f"API request failed: {str(e)}"
            logging.error(error_message)
            print(f"‚ùå Debug: {error_message}")
            return {"error": error_message}

    def generate_trading_strategy(self, user_input, chat_history=None):
        """
        Generates a structured trading strategy JSON using ChatGPT based on user input.
        Returns a dict with fields like:
            "strategy_name", "description", "indicators", "entry_condition", "exit_condition", "risk_management"
        """
        print("üìå Debug: Starting strategy generation...")

        system_prompt = """You are an expert in algorithmic trading strategy generation. 
        Your goal is to produce structured JSON strategies based on user input, formatted correctly for execution in a trading system.

        üöÄ **IMPORTANT**: Respond **ONLY** with a valid JSON object, **no additional text or markdown** before or after the JSON.

        ‚ö° **Strategy JSON Format**:
        {
            "strategy_name": "<Descriptive strategy name>",
            "description": "<Brief explanation of the strategy>",
            "indicators": [
                {
                    "type": "<Indicator Type>",
                    "parameters": {"<Parameter Name>": <Value>},
                    "condition": "<Condition>",
                    "value": <Numeric Value> (if applicable),
                    "reference": "<Reference Indicator>" (if applicable),
                    "reference_parameters": {"<Parameter Name>": <Value>} (if applicable)
                }
            ],
            "entry_condition": "<'all' or 'any'>",
            "exit_condition": {
                "type": "<Indicator Type>",
                "parameters": {"<Parameter Name>": <Value>},
                "condition": "<Condition>",
                "value": <Numeric Value> (if applicable)
            },
            "risk_management": {
                "stop_loss": <Percentage or Value>,
                "take_profit": <Percentage or Value>,
                "position_size": <Portfolio Percentage or Fixed Amount>
            }
        }

        # (The rest of your prompt remains the same: Indicators, conditions, etc.)

        **DO NOT** include explanations, formatting, or markdown‚Äîonly return the raw JSON object.
        """

        parsed_json = self._send_request(system_prompt, user_input, chat_history)

        if "error" in parsed_json:
            return parsed_json  # Return error dict

        # Convert numeric values in risk management
        try:
            parsed_json = convert_risk_management_values(parsed_json)
        except ValueError as e:
            return {"error": str(e)}

        print("‚úÖ Debug: Successfully parsed and validated JSON strategy.")
        return parsed_json

    def generate_stock_screener(self, user_input, chat_history=None):
        """
        Generates a structured stock screening JSON using ChatGPT based on user input.
        Returns a dict with a top-level "criteria" field, e.g.:
        {
          "criteria": {
             "sector": "Technology",
             "pe_ratio": { "max": 20 },
             "revenue_growth_yoy": { "min": 5 },
             "dividend_yield": { "min": 3 }
          }
        }
        """
        print("üìå Debug: Starting stock screener generation...")

        # System prompt specifically for screening
        system_prompt = """You are an expert in stock screening and fundamental analysis.
        The user will describe their screening criteria in plain English, and you will respond with a valid JSON object
        that only includes a top-level "criteria" field specifying numeric or textual filters.

        Example output format:
        {
          "criteria": {
             "sector": "Technology",
             "pe_ratio": {"max": 20},
             "revenue_growth_yoy": {"min": 5},
             "dividend_yield": {"min": 3}
          }
        }

        üöÄ **IMPORTANT**: Respond **ONLY** with a valid JSON object, **no additional text or markdown** before or after the JSON.

        ‚ö° **Numeric Fields** you might produce:
        - pe_ratio, revenue_growth_yoy, dividend_yield, market_cap, etc.
        - each one can have {"min": X} or {"max": Y} or both
        - e.g. "pe_ratio": {"max": 20}, "market_cap": {"min": 1000000000}

        ‚ö° **String Fields** you might produce:
        - sector
        - exchange
        - industry

        If the user includes any conditions that don't fit a numeric or textual field, politely ignore them or leave them out.

        **DO NOT** include extra keys (like risk management). 
        **DO NOT** add explanations or disclaimers‚Äîonly return the raw JSON object with "criteria".
        """

        parsed_json = self._send_request(system_prompt, user_input, chat_history)

        if "error" in parsed_json:
            return parsed_json  # Return error dict if parsing failed

        # Optional: Validate the structure to ensure we have top-level "criteria"
        if "criteria" not in parsed_json:
            return {"error": "No 'criteria' field found in the JSON response."}

        # We assume the user might have numeric filters for certain columns
        # (Optionally do further validation here if needed)

        print("‚úÖ Debug: Successfully parsed JSON screener criteria.")
        return parsed_json
